"""
This type stub file was generated by pyright.
"""

import dataclasses
from typing import Any, Callable, Dict, Optional, Sequence, Tuple
from google.api_core import gapic_v1
from google.auth import credentials as ga_credentials
from google.auth.transport.requests import AuthorizedSession
from google.ai.generativelanguage_v1beta.types import text_service
from .base import TextServiceTransport

OptionalRetry = ...
DEFAULT_CLIENT_INFO = ...
class TextServiceRestInterceptor:
    """Interceptor for TextService.

    Interceptors are used to manipulate requests, request metadata, and responses
    in arbitrary ways.
    Example use cases include:
    * Logging
    * Verifying requests according to service or custom semantics
    * Stripping extraneous information from responses

    These use cases and more can be enabled by injecting an
    instance of a custom subclass when constructing the TextServiceRestTransport.

    .. code-block:: python
        class MyCustomTextServiceInterceptor(TextServiceRestInterceptor):
            def pre_batch_embed_text(self, request, metadata):
                logging.log(f"Received request: {request}")
                return request, metadata

            def post_batch_embed_text(self, response):
                logging.log(f"Received response: {response}")
                return response

            def pre_count_text_tokens(self, request, metadata):
                logging.log(f"Received request: {request}")
                return request, metadata

            def post_count_text_tokens(self, response):
                logging.log(f"Received response: {response}")
                return response

            def pre_embed_text(self, request, metadata):
                logging.log(f"Received request: {request}")
                return request, metadata

            def post_embed_text(self, response):
                logging.log(f"Received response: {response}")
                return response

            def pre_generate_text(self, request, metadata):
                logging.log(f"Received request: {request}")
                return request, metadata

            def post_generate_text(self, response):
                logging.log(f"Received response: {response}")
                return response

        transport = TextServiceRestTransport(interceptor=MyCustomTextServiceInterceptor())
        client = TextServiceClient(transport=transport)


    """
    def pre_batch_embed_text(self, request: text_service.BatchEmbedTextRequest, metadata: Sequence[Tuple[str, str]]) -> Tuple[text_service.BatchEmbedTextRequest, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for batch_embed_text

        Override in a subclass to manipulate the request or metadata
        before they are sent to the TextService server.
        """
        ...
    
    def post_batch_embed_text(self, response: text_service.BatchEmbedTextResponse) -> text_service.BatchEmbedTextResponse:
        """Post-rpc interceptor for batch_embed_text

        Override in a subclass to manipulate the response
        after it is returned by the TextService server but before
        it is returned to user code.
        """
        ...
    
    def pre_count_text_tokens(self, request: text_service.CountTextTokensRequest, metadata: Sequence[Tuple[str, str]]) -> Tuple[text_service.CountTextTokensRequest, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for count_text_tokens

        Override in a subclass to manipulate the request or metadata
        before they are sent to the TextService server.
        """
        ...
    
    def post_count_text_tokens(self, response: text_service.CountTextTokensResponse) -> text_service.CountTextTokensResponse:
        """Post-rpc interceptor for count_text_tokens

        Override in a subclass to manipulate the response
        after it is returned by the TextService server but before
        it is returned to user code.
        """
        ...
    
    def pre_embed_text(self, request: text_service.EmbedTextRequest, metadata: Sequence[Tuple[str, str]]) -> Tuple[text_service.EmbedTextRequest, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for embed_text

        Override in a subclass to manipulate the request or metadata
        before they are sent to the TextService server.
        """
        ...
    
    def post_embed_text(self, response: text_service.EmbedTextResponse) -> text_service.EmbedTextResponse:
        """Post-rpc interceptor for embed_text

        Override in a subclass to manipulate the response
        after it is returned by the TextService server but before
        it is returned to user code.
        """
        ...
    
    def pre_generate_text(self, request: text_service.GenerateTextRequest, metadata: Sequence[Tuple[str, str]]) -> Tuple[text_service.GenerateTextRequest, Sequence[Tuple[str, str]]]:
        """Pre-rpc interceptor for generate_text

        Override in a subclass to manipulate the request or metadata
        before they are sent to the TextService server.
        """
        ...
    
    def post_generate_text(self, response: text_service.GenerateTextResponse) -> text_service.GenerateTextResponse:
        """Post-rpc interceptor for generate_text

        Override in a subclass to manipulate the response
        after it is returned by the TextService server but before
        it is returned to user code.
        """
        ...
    


@dataclasses.dataclass
class TextServiceRestStub:
    _session: AuthorizedSession
    _host: str
    _interceptor: TextServiceRestInterceptor
    ...


class TextServiceRestTransport(TextServiceTransport):
    """REST backend transport for TextService.

    API for using Generative Language Models (GLMs) trained to
    generate text.
    Also known as Large Language Models (LLM)s, these generate text
    given an input prompt from the user.

    This class defines the same methods as the primary client, so the
    primary client can load the underlying transport implementation
    and call it.

    It sends JSON representations of protocol buffers over HTTP/1.1

    """
    def __init__(self, *, host: str = ..., credentials: Optional[ga_credentials.Credentials] = ..., credentials_file: Optional[str] = ..., scopes: Optional[Sequence[str]] = ..., client_cert_source_for_mtls: Optional[Callable[[], Tuple[bytes, bytes]]] = ..., quota_project_id: Optional[str] = ..., client_info: gapic_v1.client_info.ClientInfo = ..., always_use_jwt_access: Optional[bool] = ..., url_scheme: str = ..., interceptor: Optional[TextServiceRestInterceptor] = ..., api_audience: Optional[str] = ...) -> None:
        """Instantiate the transport.

        Args:
            host (Optional[str]):
                 The hostname to connect to (default: 'generativelanguage.googleapis.com').
            credentials (Optional[google.auth.credentials.Credentials]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.

            credentials_file (Optional[str]): A file with credentials that can
                be loaded with :func:`google.auth.load_credentials_from_file`.
                This argument is ignored if ``channel`` is provided.
            scopes (Optional(Sequence[str])): A list of scopes. This argument is
                ignored if ``channel`` is provided.
            client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client
                certificate to configure mutual TLS HTTP channel. It is ignored
                if ``channel`` is provided.
            quota_project_id (Optional[str]): An optional project to use for billing
                and quota.
            client_info (google.api_core.gapic_v1.client_info.ClientInfo):
                The client info used to send a user-agent string along with
                API requests. If ``None``, then default info will be used.
                Generally, you only need to set this if you are developing
                your own client library.
            always_use_jwt_access (Optional[bool]): Whether self signed JWT should
                be used for service account credentials.
            url_scheme: the protocol scheme for the API endpoint.  Normally
                "https", but for testing or local servers,
                "http" can be specified.
        """
        ...
    
    class _BatchEmbedText(TextServiceRestStub):
        def __hash__(self) -> int:
            ...
        
        __REQUIRED_FIELDS_DEFAULT_VALUES: Dict[str, Any] = ...
        def __call__(self, request: text_service.BatchEmbedTextRequest, *, retry: OptionalRetry = ..., timeout: Optional[float] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> text_service.BatchEmbedTextResponse:
            r"""Call the batch embed text method over HTTP.

            Args:
                request (~.text_service.BatchEmbedTextRequest):
                    The request object. Batch request to get a text embedding
                from the model.
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.

            Returns:
                ~.text_service.BatchEmbedTextResponse:
                    The response to a EmbedTextRequest.
            """
            ...
        
    
    
    class _CountTextTokens(TextServiceRestStub):
        def __hash__(self) -> int:
            ...
        
        __REQUIRED_FIELDS_DEFAULT_VALUES: Dict[str, Any] = ...
        def __call__(self, request: text_service.CountTextTokensRequest, *, retry: OptionalRetry = ..., timeout: Optional[float] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> text_service.CountTextTokensResponse:
            r"""Call the count text tokens method over HTTP.

            Args:
                request (~.text_service.CountTextTokensRequest):
                    The request object. Counts the number of tokens in the ``prompt`` sent to a
                model.

                Models may tokenize text differently, so each model may
                return a different ``token_count``.
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.

            Returns:
                ~.text_service.CountTextTokensResponse:
                    A response from ``CountTextTokens``.

                It returns the model's ``token_count`` for the
                ``prompt``.

            """
            ...
        
    
    
    class _EmbedText(TextServiceRestStub):
        def __hash__(self) -> int:
            ...
        
        __REQUIRED_FIELDS_DEFAULT_VALUES: Dict[str, Any] = ...
        def __call__(self, request: text_service.EmbedTextRequest, *, retry: OptionalRetry = ..., timeout: Optional[float] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> text_service.EmbedTextResponse:
            r"""Call the embed text method over HTTP.

            Args:
                request (~.text_service.EmbedTextRequest):
                    The request object. Request to get a text embedding from
                the model.
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.

            Returns:
                ~.text_service.EmbedTextResponse:
                    The response to a EmbedTextRequest.
            """
            ...
        
    
    
    class _GenerateText(TextServiceRestStub):
        def __hash__(self) -> int:
            ...
        
        __REQUIRED_FIELDS_DEFAULT_VALUES: Dict[str, Any] = ...
        def __call__(self, request: text_service.GenerateTextRequest, *, retry: OptionalRetry = ..., timeout: Optional[float] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> text_service.GenerateTextResponse:
            r"""Call the generate text method over HTTP.

            Args:
                request (~.text_service.GenerateTextRequest):
                    The request object. Request to generate a text completion
                response from the model.
                retry (google.api_core.retry.Retry): Designation of what errors, if any,
                    should be retried.
                timeout (float): The timeout for this request.
                metadata (Sequence[Tuple[str, str]]): Strings which should be
                    sent along with the request as metadata.

            Returns:
                ~.text_service.GenerateTextResponse:
                    The response from the model,
                including candidate completions.

            """
            ...
        
    
    
    @property
    def batch_embed_text(self) -> Callable[[text_service.BatchEmbedTextRequest], text_service.BatchEmbedTextResponse]:
        ...
    
    @property
    def count_text_tokens(self) -> Callable[[text_service.CountTextTokensRequest], text_service.CountTextTokensResponse]:
        ...
    
    @property
    def embed_text(self) -> Callable[[text_service.EmbedTextRequest], text_service.EmbedTextResponse]:
        ...
    
    @property
    def generate_text(self) -> Callable[[text_service.GenerateTextRequest], text_service.GenerateTextResponse]:
        ...
    
    @property
    def kind(self) -> str:
        ...
    
    def close(self): # -> None:
        ...
    


__all__ = ("TextServiceRestTransport", )

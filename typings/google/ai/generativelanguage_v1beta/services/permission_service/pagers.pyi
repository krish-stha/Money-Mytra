"""
This type stub file was generated by pyright.
"""

from typing import Any, AsyncIterator, Awaitable, Callable, Iterator, Sequence, Tuple, Union
from google.ai.generativelanguage_v1beta.types import permission, permission_service

"""
This type stub file was generated by pyright.
"""
OptionalRetry = ...
OptionalAsyncRetry = ...
class ListPermissionsPager:
    """A pager for iterating through ``list_permissions`` requests.

    This class thinly wraps an initial
    :class:`google.ai.generativelanguage_v1beta.types.ListPermissionsResponse` object, and
    provides an ``__iter__`` method to iterate through its
    ``permissions`` field.

    If there are more pages, the ``__iter__`` method will make additional
    ``ListPermissions`` requests and continue to iterate
    through the ``permissions`` field on the
    corresponding responses.

    All the usual :class:`google.ai.generativelanguage_v1beta.types.ListPermissionsResponse`
    attributes are available on the pager. If multiple requests are made, only
    the most recent response is retained, and thus used for attribute lookup.
    """
    def __init__(self, method: Callable[..., permission_service.ListPermissionsResponse], request: permission_service.ListPermissionsRequest, response: permission_service.ListPermissionsResponse, *, retry: OptionalRetry = ..., timeout: Union[float, object] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> None:
        """Instantiate the pager.

        Args:
            method (Callable): The method that was originally called, and
                which instantiated this pager.
            request (google.ai.generativelanguage_v1beta.types.ListPermissionsRequest):
                The initial request object.
            response (google.ai.generativelanguage_v1beta.types.ListPermissionsResponse):
                The initial response object.
            retry (google.api_core.retry.Retry): Designation of what errors,
                if any, should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        """
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    
    @property
    def pages(self) -> Iterator[permission_service.ListPermissionsResponse]:
        ...
    
    def __iter__(self) -> Iterator[permission.Permission]:
        ...
    
    def __repr__(self) -> str:
        ...
    


class ListPermissionsAsyncPager:
    """A pager for iterating through ``list_permissions`` requests.

    This class thinly wraps an initial
    :class:`google.ai.generativelanguage_v1beta.types.ListPermissionsResponse` object, and
    provides an ``__aiter__`` method to iterate through its
    ``permissions`` field.

    If there are more pages, the ``__aiter__`` method will make additional
    ``ListPermissions`` requests and continue to iterate
    through the ``permissions`` field on the
    corresponding responses.

    All the usual :class:`google.ai.generativelanguage_v1beta.types.ListPermissionsResponse`
    attributes are available on the pager. If multiple requests are made, only
    the most recent response is retained, and thus used for attribute lookup.
    """
    def __init__(self, method: Callable[..., Awaitable[permission_service.ListPermissionsResponse]], request: permission_service.ListPermissionsRequest, response: permission_service.ListPermissionsResponse, *, retry: OptionalAsyncRetry = ..., timeout: Union[float, object] = ..., metadata: Sequence[Tuple[str, str]] = ...) -> None:
        """Instantiates the pager.

        Args:
            method (Callable): The method that was originally called, and
                which instantiated this pager.
            request (google.ai.generativelanguage_v1beta.types.ListPermissionsRequest):
                The initial request object.
            response (google.ai.generativelanguage_v1beta.types.ListPermissionsResponse):
                The initial response object.
            retry (google.api_core.retry.AsyncRetry): Designation of what errors,
                if any, should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent along with the request as metadata.
        """
        ...
    
    def __getattr__(self, name: str) -> Any:
        ...
    
    @property
    async def pages(self) -> AsyncIterator[permission_service.ListPermissionsResponse]:
        ...
    
    def __aiter__(self) -> AsyncIterator[permission.Permission]:
        ...
    
    def __repr__(self) -> str:
        ...
    



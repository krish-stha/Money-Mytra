"""
This type stub file was generated by pyright.
"""

from google.api_core.future import base

"""AsyncIO implementation of the abstract base Future class."""
class _OperationNotComplete(Exception):
    """Private exception used for polling via retry."""
    ...


RETRY_PREDICATE = ...
DEFAULT_RETRY = ...
class AsyncFuture(base.Future):
    """A Future that polls peer service to self-update.

    The :meth:`done` method should be implemented by subclasses. The polling
    behavior will repeatedly call ``done`` until it returns True.

    .. note::

        Privacy here is intended to prevent the final class from
        overexposing, not to prevent subclasses from accessing methods.

    Args:
        retry (google.api_core.retry.Retry): The retry configuration used
            when polling. This can be used to control how often :meth:`done`
            is polled. Regardless of the retry's ``deadline``, it will be
            overridden by the ``timeout`` argument to :meth:`result`.
    """
    def __init__(self, retry=...) -> None:
        ...
    
    async def done(self, retry=...):
        """Checks to see if the operation is complete.

        Args:
            retry (google.api_core.retry.Retry): (Optional) How to retry the RPC.

        Returns:
            bool: True if the operation is complete, False otherwise.
        """
        ...
    
    async def running(self): # -> bool:
        """True if the operation is currently running."""
        ...
    
    async def result(self, timeout=...): # -> Any:
        """Get the result of the operation.

        Args:
            timeout (int):
                How long (in seconds) to wait for the operation to complete.
                If None, wait indefinitely.

        Returns:
            google.protobuf.Message: The Operation's result.

        Raises:
            google.api_core.GoogleAPICallError: If the operation errors or if
                the timeout is reached before the operation completes.
        """
        ...
    
    async def exception(self, timeout=...): # -> BaseException | None:
        """Get the exception from the operation.

        Args:
            timeout (int): How long to wait for the operation to complete.
                If None, wait indefinitely.

        Returns:
            Optional[google.api_core.GoogleAPICallError]: The operation's
                error.
        """
        ...
    
    def add_done_callback(self, fn): # -> None:
        """Add a callback to be executed when the operation is complete.

        If the operation is completed, the callback will be scheduled onto the
        event loop. Otherwise, the callback will be stored and invoked when the
        future is done.

        Args:
            fn (Callable[Future]): The callback to execute when the operation
                is complete.
        """
        ...
    
    def set_result(self, result): # -> None:
        """Set the Future's result."""
        ...
    
    def set_exception(self, exception): # -> None:
        """Set the Future's exception."""
        ...
    



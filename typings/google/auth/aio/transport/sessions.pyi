"""
This type stub file was generated by pyright.
"""

import functools
from contextlib import asynccontextmanager
from typing import Mapping, Optional
from google.auth.aio import transport
from google.auth.aio.credentials import Credentials

AIOHTTP_INSTALLED = ...
@asynccontextmanager
async def timeout_guard(timeout): # -> Generator[Callable[..., Coroutine[Any, Any, Any]], Any, None]:
    """
    timeout_guard is an asynchronous context manager to apply a timeout to an asynchronous block of code.

    Args:
        timeout (float): The time in seconds before the context manager times out.

    Raises:
        google.auth.exceptions.TimeoutError: If the code within the context exceeds the provided timeout.

    Usage:
        async with timeout_guard(10) as with_timeout:
            await with_timeout(async_function())
    """
    ...

class AsyncAuthorizedSession:
    """This is an asynchronous implementation of :class:`google.auth.requests.AuthorizedSession` class.
    We utilize an instance of a class that implements :class:`google.auth.aio.transport.Request` configured
    by the caller or otherwise default to `google.auth.aio.transport.aiohttp.Request` if the external aiohttp
    package is installed.

    A Requests Session class with credentials.

    This class is used to perform asynchronous requests to API endpoints that require
    authorization::

        import aiohttp
        from google.auth.aio.transport import sessions

        async with sessions.AsyncAuthorizedSession(credentials) as authed_session:
            response = await authed_session.request(
                'GET', 'https://www.googleapis.com/storage/v1/b')

    The underlying :meth:`request` implementation handles adding the
    credentials' headers to the request and refreshing credentials as needed.

    Args:
        credentials (google.auth.aio.credentials.Credentials):
            The credentials to add to the request.
        auth_request (Optional[google.auth.aio.transport.Request]):
            An instance of a class that implements
            :class:`~google.auth.aio.transport.Request` used to make requests
            and refresh credentials. If not passed,
            an instance of :class:`~google.auth.aio.transport.aiohttp.Request`
            is created.

    Raises:
        - google.auth.exceptions.TransportError: If `auth_request` is `None`
            and the external package `aiohttp` is not installed.
        - google.auth.exceptions.InvalidType: If the provided credentials are
            not of type `google.auth.aio.credentials.Credentials`.
    """
    def __init__(self, credentials: Credentials, auth_request: Optional[transport.Request] = ...) -> None:
        ...
    
    async def request(self, method: str, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        """
        Args:
                method (str): The http method used to make the request.
                url (str): The URI to be requested.
                data (Optional[bytes]): The payload or body in HTTP request.
                headers (Optional[Mapping[str, str]]): Request headers.
                timeout (float):
                The amount of time in seconds to wait for the server response
                with each individual request.
                max_allowed_time (float):
                If the method runs longer than this, a ``Timeout`` exception is
                automatically raised. Unlike the ``timeout`` parameter, this
                value applies to the total method execution time, even if
                multiple requests are made under the hood.

                Mind that it is not guaranteed that the timeout error is raised
                at ``max_allowed_time``. It might take longer, for example, if
                an underlying request takes a lot of time, but the request
                itself does not timeout, e.g. if a large file is being
                transmitted. The timout error will be raised after such
                request completes.

        Returns:
                google.auth.aio.transport.Response: The HTTP response.

        Raises:
                google.auth.exceptions.TimeoutError: If the method does not complete within
                the configured `max_allowed_time` or the request exceeds the configured
                `timeout`.
        """
        ...
    
    @functools.wraps(request)
    async def get(self, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        ...
    
    @functools.wraps(request)
    async def post(self, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        ...
    
    @functools.wraps(request)
    async def put(self, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        ...
    
    @functools.wraps(request)
    async def patch(self, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        ...
    
    @functools.wraps(request)
    async def delete(self, url: str, data: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., max_allowed_time: float = ..., timeout: float = ..., **kwargs) -> transport.Response:
        ...
    
    async def close(self) -> None:
        """
        Close the underlying auth request session.
        """
        ...
    



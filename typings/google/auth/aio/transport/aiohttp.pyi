"""
This type stub file was generated by pyright.
"""

import aiohttp
from typing import AsyncGenerator, Mapping, Optional
from google.auth import _helpers
from google.auth.aio import transport

"""Transport adapter for Asynchronous HTTP Requests based on aiohttp.
"""
class Response(transport.Response):
    """
    Represents an HTTP response and its data. It is returned by ``google.auth.aio.transport.sessions.AsyncAuthorizedSession``.

    Args:
        response (aiohttp.ClientResponse): An instance of aiohttp.ClientResponse.

    Attributes:
        status_code (int): The HTTP status code of the response.
        headers (Mapping[str, str]): The HTTP headers of the response.
    """
    def __init__(self, response: aiohttp.ClientResponse) -> None:
        ...
    
    @property
    @_helpers.copy_docstring(transport.Response)
    def status_code(self) -> int:
        ...
    
    @property
    @_helpers.copy_docstring(transport.Response)
    def headers(self) -> Mapping[str, str]:
        ...
    
    @_helpers.copy_docstring(transport.Response)
    async def content(self, chunk_size: int = ...) -> AsyncGenerator[bytes, None]:
        ...
    
    @_helpers.copy_docstring(transport.Response)
    async def read(self) -> bytes:
        ...
    
    @_helpers.copy_docstring(transport.Response)
    async def close(self): # -> None:
        ...
    


class Request(transport.Request):
    """Asynchronous Requests request adapter.

    This class is used internally for making requests using aiohttp
    in a consistent way. If you use :class:`google.auth.aio.transport.sessions.AsyncAuthorizedSession`
    you do not need to construct or use this class directly.

    This class can be useful if you want to configure a Request callable
    with a custom ``aiohttp.ClientSession`` in :class:`AuthorizedSession` or if
    you want to manually refresh a :class:`~google.auth.aio.credentials.Credentials` instance::

        import aiohttp
        import google.auth.aio.transport.aiohttp

        # Default example:
        request = google.auth.aio.transport.aiohttp.Request()
        await credentials.refresh(request)

        # Custom aiohttp Session Example:
        session = session=aiohttp.ClientSession(auto_decompress=False)
        request = google.auth.aio.transport.aiohttp.Request(session=session)
        auth_sesion = google.auth.aio.transport.sessions.AsyncAuthorizedSession(auth_request=request)

    Args:
        session (aiohttp.ClientSession): An instance :class:`aiohttp.ClientSession` used
            to make HTTP requests. If not specified, a session will be created.

    .. automethod:: __call__
    """
    def __init__(self, session: aiohttp.ClientSession = ...) -> None:
        ...
    
    async def __call__(self, url: str, method: str = ..., body: Optional[bytes] = ..., headers: Optional[Mapping[str, str]] = ..., timeout: float = ..., **kwargs) -> transport.Response:
        """
        Make an HTTP request using aiohttp.

        Args:
            url (str): The URL to be requested.
            method (Optional[str]):
                The HTTP method to use for the request. Defaults to 'GET'.
            body (Optional[bytes]):
                The payload or body in HTTP request.
            headers (Optional[Mapping[str, str]]):
                Request headers.
            timeout (float): The number of seconds to wait for a
                response from the server. If not specified or if None, the
                requests default timeout will be used.
            kwargs: Additional arguments passed through to the underlying
                aiohttp :meth:`aiohttp.Session.request` method.

        Returns:
            google.auth.aio.transport.Response: The HTTP response.

        Raises:
            - google.auth.exceptions.TransportError: If the request fails or if the session is closed.
            - google.auth.exceptions.TimeoutError: If the request times out.
        """
        ...
    
    async def close(self) -> None:
        """
        Close the underlying aiohttp session to release the acquired resources.
        """
        ...
    



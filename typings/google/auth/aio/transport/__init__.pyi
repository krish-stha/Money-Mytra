"""
This type stub file was generated by pyright.
"""

import abc
import google.auth.transport
from typing import AsyncGenerator, Mapping, Optional

"""Transport - Asynchronous HTTP client library support.

:mod:`google.auth.aio` is designed to work with various asynchronous client libraries such
as aiohttp. In order to work across these libraries with different
interfaces some abstraction is needed.

This module provides two interfaces that are implemented by transport adapters
to support HTTP libraries. :class:`Request` defines the interface expected by
:mod:`google.auth` to make asynchronous requests. :class:`Response` defines the interface
for the return value of :class:`Request`.
"""
_DEFAULT_TIMEOUT_SECONDS = ...
DEFAULT_RETRYABLE_STATUS_CODES = ...
DEFAULT_MAX_RETRY_ATTEMPTS = ...
class Response(metaclass=abc.ABCMeta):
    """Asynchronous HTTP Response Interface."""
    @property
    @abc.abstractmethod
    def status_code(self) -> int:
        """
        The HTTP response status code.

        Returns:
            int: The HTTP response status code.

        """
        ...
    
    @property
    @abc.abstractmethod
    def headers(self) -> Mapping[str, str]:
        """The HTTP response headers.

        Returns:
            Mapping[str, str]: The HTTP response headers.
        """
        ...
    
    @abc.abstractmethod
    async def content(self, chunk_size: int) -> AsyncGenerator[bytes, None]:
        """The raw response content.

        Args:
            chunk_size (int): The size of each chunk.

        Yields:
            AsyncGenerator[bytes, None]: An asynchronous generator yielding
            response chunks as bytes.
        """
        ...
    
    @abc.abstractmethod
    async def read(self) -> bytes:
        """Read the entire response content as bytes.

        Returns:
            bytes: The entire response content.
        """
        ...
    
    @abc.abstractmethod
    async def close(self):
        """Close the response after it is fully consumed to resource."""
        ...
    


class Request(metaclass=abc.ABCMeta):
    """Interface for a callable that makes HTTP requests.

    Specific transport implementations should provide an implementation of
    this that adapts their specific request / response API.

    .. automethod:: __call__
    """
    @abc.abstractmethod
    async def __call__(self, url: str, method: str, body: Optional[bytes], headers: Optional[Mapping[str, str]], timeout: float, **kwargs) -> Response:
        """Make an HTTP request.

        Args:
            url (str): The URI to be requested.
            method (str): The HTTP method to use for the request. Defaults
                to 'GET'.
            body (Optional[bytes]): The payload / body in HTTP request.
            headers (Mapping[str, str]): Request headers.
            timeout (float): The number of seconds to wait for a
                response from the server. If not specified or if None, the
                transport-specific default timeout will be used.
            kwargs: Additional arguments passed on to the transport's
                request method.

        Returns:
            google.auth.aio.transport.Response: The HTTP response.

        Raises:
            google.auth.exceptions.TransportError: If any exception occurred.
        """
        ...
    
    async def close(self) -> None:
        """
        Close the underlying session.
        """
        ...
    



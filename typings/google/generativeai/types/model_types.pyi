"""
This type stub file was generated by pyright.
"""

import dataclasses
import datetime
import pathlib
from collections.abc import Mapping
from typing import Any, Iterable, Union
from typing_extensions import TypedDict
from google.generativeai import protos, string_utils
from google.generativeai.types import permission_types

"""
This type stub file was generated by pyright.
"""
__all__ = ["Model", "ModelNameOptions", "AnyModelNameOptions", "BaseModelNameOptions", "TunedModelNameOptions", "ModelsIterable", "TunedModel", "TunedModelState"]
TunedModelState = protos.TunedModel.State
TunedModelStateOptions = Union[None, str, int, TunedModelState]
_TUNED_MODEL_VALID_NAME = ...
TUNED_MODEL_NAME_ERROR_MSG = ...
def valid_tuned_model_name(name: str) -> bool:
    ...

_TUNED_MODEL_STATES: dict[TunedModelStateOptions, TunedModelState] = ...
def to_tuned_model_state(x: TunedModelStateOptions) -> TunedModelState:
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class Model:
    """A dataclass representation of a `protos.Model`.

    Attributes:
        name: The resource name of the `Model`. Format: `models/{model}` with a `{model}` naming
           convention of: "{base_model_id}-{version}". For example: `models/chat-bison-001`.
        base_model_id: The base name of the model. For example: `chat-bison`.
        version:  The major version number of the model. For example: `001`.
        display_name: The human-readable name of the model. E.g. `"Chat Bison"`. The name can be up
           to 128 characters long and can consist of any UTF-8 characters.
        description: A short description of the model.
        input_token_limit: Maximum number of input tokens allowed for this model.
        output_token_limit: Maximum number of output tokens available for this model.
        supported_generation_methods: lists which methods are supported by the model. The method
          names are defined as Pascal case strings, such as `generateMessage` which correspond to
          API methods.
    """
    name: str
    base_model_id: str
    version: str
    display_name: str
    description: str
    input_token_limit: int
    output_token_limit: int
    supported_generation_methods: list[str]
    temperature: float | None = ...
    max_temperature: float | None = ...
    top_p: float | None = ...
    top_k: int | None = ...


def idecode_time(parent: dict[str, Any], name: str):
    ...

def decode_tuned_model(tuned_model: protos.TunedModel | dict[str, Any]) -> TunedModel:
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class TunedModel:
    """A dataclass representation of a `protos.TunedModel`."""
    name: str | None = ...
    source_model: str | None = ...
    base_model: str | None = ...
    display_name: str = ...
    description: str = ...
    temperature: float | None = ...
    top_p: float | None = ...
    top_k: float | None = ...
    state: TunedModelState = ...
    create_time: datetime.datetime | None = ...
    update_time: datetime.datetime | None = ...
    tuning_task: TuningTask | None = ...
    reader_project_numbers: list[int] | None = ...
    @property
    def permissions(self) -> permission_types.Permissions:
        ...
    


@string_utils.prettyprint
@dataclasses.dataclass
class TuningTask:
    start_time: datetime.datetime | None = ...
    complete_time: datetime.datetime | None = ...
    snapshots: list[TuningSnapshot] = ...
    hyperparameters: Hyperparameters | None = ...


class TuningExampleDict(TypedDict):
    text_input: str
    output: str
    ...


TuningExampleOptions = Union[TuningExampleDict, protos.TuningExample, tuple[str, str], list[str]]
TuningDataOptions = Union[pathlib.Path, str, protos.Dataset, Mapping[str, Iterable[str]], Iterable[TuningExampleOptions],]
def encode_tuning_data(data: TuningDataOptions, input_key=..., output_key=...) -> protos.Dataset:
    ...

def encode_tuning_example(example: TuningExampleOptions, input_key, output_key):
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class TuningSnapshot:
    step: int
    epoch: int
    mean_score: float
    compute_time: datetime.datetime
    ...


@string_utils.prettyprint
@dataclasses.dataclass
class Hyperparameters:
    epoch_count: int = ...
    batch_size: int = ...
    learning_rate: float = ...


BaseModelNameOptions = Union[str, Model, protos.Model]
TunedModelNameOptions = Union[str, TunedModel, protos.TunedModel]
AnyModelNameOptions = Union[str, Model, protos.Model, TunedModel, protos.TunedModel]
ModelNameOptions = AnyModelNameOptions
def make_model_name(name: AnyModelNameOptions):
    ...

ModelsIterable = Iterable[Model]
TunedModelsIterable = Iterable[TunedModel]
@string_utils.prettyprint
@dataclasses.dataclass
class TokenCount:
    """A dataclass representation of a `protos.TokenCountResponse`.

    Attributes:
        token_count: The number of tokens returned by the model's tokenizer for the `input_text`.
        token_count_limit:
    """
    token_count: int
    token_count_limit: int
    def over_limit(self):
        ...
    



"""
This type stub file was generated by pyright.
"""

import datetime
import abc
import dataclasses
import google.ai.generativelanguage as glm
from typing import Any, AsyncIterable, Iterable, Mapping, Optional, Union
from typing_extensions import deprecated
from google.generativeai import protos, string_utils
from google.generativeai.types import helper_types, permission_types

"""
This type stub file was generated by pyright.
"""
_VALID_NAME = ...
NAME_ERROR_MSG = ...
def valid_name(name):
    ...

Operator = protos.Condition.Operator
State = protos.Chunk.State
OperatorOptions = Union[str, int, Operator]
StateOptions = Union[str, int, State]
ChunkOptions = Union[protos.Chunk, str, tuple[str, str], tuple[str, str, Any], Mapping[str, Any],]
BatchCreateChunkOptions = Union[protos.BatchCreateChunksRequest, Mapping[str, str], Mapping[str, tuple[str, str]], Iterable[ChunkOptions],]
UpdateChunkOptions = Union[protos.UpdateChunkRequest, Mapping[str, Any], tuple[str, Any]]
BatchUpdateChunksOptions = Union[protos.BatchUpdateChunksRequest, Iterable[UpdateChunkOptions]]
BatchDeleteChunkOptions = Union[list[protos.DeleteChunkRequest], Iterable[str]]
_OPERATOR: dict[OperatorOptions, Operator] = ...
_STATE: dict[StateOptions, State] = ...
def to_operator(x: OperatorOptions) -> Operator:
    ...

def to_state(x: StateOptions) -> State:
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class MetadataFilter:
    key: str
    conditions: Iterable[Condition]
    ...


@string_utils.prettyprint
@dataclasses.dataclass
class Condition:
    value: str | float
    operation: Operator
    ...


@string_utils.prettyprint
@dataclasses.dataclass
class CustomMetadata:
    key: str
    value: str | Iterable[str] | float
    ...


CustomMetadataOptions = Union[CustomMetadata, protos.CustomMetadata, dict]
def make_custom_metadata(cm: CustomMetadataOptions) -> CustomMetadata:
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class ChunkData:
    string_value: str
    ...


@string_utils.prettyprint
@dataclasses.dataclass()
class Corpus:
    """
    A `Corpus` is a collection of `Documents`.
    """
    name: str
    display_name: str
    create_time: datetime.datetime
    update_time: datetime.datetime
    @property
    def permissions(self) -> permission_types.Permissions:
        ...
    
    def create_document(self, name: str | None = ..., display_name: str | None = ..., custom_metadata: Iterable[CustomMetadata] | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Document:
        """
        Request to create a `Document`.

        Args:
            name: The `Document` resource name. The ID (name excluding the "corpora/*/documents/" prefix) can contain up to 40 characters
                that are lowercase alphanumeric or dashes (-). The ID cannot start or end with a dash.
            display_name: The human-readable display name for the `Document`.
            custom_metadata: User provided custom metadata stored as key-value pairs used for querying.
            request_options: Options for the request.

        Return:
            Document object with specified name or display name.

        Raises:
            ValueError: When the name is not specified or formatted incorrectly.
        """
        ...
    
    async def create_document_async(self, name: str | None = ..., display_name: str | None = ..., custom_metadata: Iterable[CustomMetadata] | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Document:
        """This is the async version of `Corpus.create_document`."""
        ...
    
    def get_document(self, name: str, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Document:
        """
        Get information about a specific `Document`.

        Args:
            name: The `Document` name.
            request_options: Options for the request.

        Return:
            `Document` of interest.
        """
        ...
    
    async def get_document_async(self, name: str, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Document:
        """This is the async version of `Corpus.get_document`."""
        ...
    
    def update(self, updates: dict[str, Any], client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Update a list of fields for a specified `Corpus`.

        Args:
            updates: List of fields to update in a `Corpus`.
            request_options: Options for the request.

        Return:
            Updated version of the `Corpus` object.
        """
        ...
    
    async def update_async(self, updates: dict[str, Any], client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Corpus.update`."""
        ...
    
    def query(self, query: str, metadata_filters: Iterable[MetadataFilter] | None = ..., results_count: int | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Iterable[RelevantChunk]:
        """
        Query a corpus for information.

        Args:
            query: Query string to perform semantic search.
            metadata_filters: Filter for `Chunk` metadata.
            results_count: The maximum number of `Chunk`s to return; must be less than 100.
            request_options: Options for the request.

        Returns:
            List of relevant chunks.
        """
        ...
    
    async def query_async(self, query: str, metadata_filters: Iterable[MetadataFilter] | None = ..., results_count: int | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Iterable[RelevantChunk]:
        """This is the async version of `Corpus.query`."""
        ...
    
    def delete_document(self, name: str, force: bool = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Delete a document in the corpus.

        Args:
            name: The `Document` name.
            force: If set to true, any `Chunk`s and objects related to this `Document` will also be deleted.
            request_options: Options for the request.
        """
        ...
    
    async def delete_document_async(self, name: str, force: bool = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Corpus.delete_document`."""
        ...
    
    def list_documents(self, page_size: int | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Iterable[Document]:
        """
        List documents in corpus.

        Args:
            name: The name of the `Corpus` containing `Document`s.
            page_size: The maximum number of `Document`s to return (per page). The service may return fewer `Document`s.
            request_options: Options for the request.

        Return:
            Paginated list of `Document`s.
        """
        ...
    
    async def list_documents_async(self, page_size: int | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> AsyncIterable[Document]:
        """This is the async version of `Corpus.list_documents`."""
        ...
    
    @deprecated("`Corpus.create_permission` is deprecated and will be removed in a future release. \
            Corpus permissions are now managed using the `permissions` property. Use `Corpus.permissions.create` instead.")
    def create_permission(self, role: permission_types.RoleOptions, grantee_type: Optional[permission_types.GranteeTypeOptions] = ..., email_address: Optional[str] = ..., client: glm.PermissionServiceClient | None = ...) -> permission_types.Permission:
        ...
    
    @deprecated("`Corpus.create_permission_async` is deprecated and will be removed in a future release. \
            Corpus permissions are now managed using the `permissions` property. Use `Corpus.permissions.create_async` instead.")
    async def create_permission_async(self, role: permission_types.RoleOptions, grantee_type: Optional[permission_types.GranteeTypeOptions] = ..., email_address: Optional[str] = ..., client: glm.PermissionServiceAsyncClient | None = ...) -> permission_types.Permission:
        ...
    
    @deprecated("`Corpus.list_permission` is deprecated and will be removed in a future release. \
            Corpus permissions are now managed using the `permissions` property. Use `Corpus.permissions.list` instead.")
    def list_permissions(self, page_size: Optional[int] = ..., client: glm.PermissionServiceClient | None = ...) -> Iterable[permission_types.Permission]:
        ...
    
    @deprecated("`Corpus.list_permission_async` is deprecated and will be removed in a future release. \
            Corpus permissions are now managed using the `permissions` property. Use `Corpus.permissions.list_async` instead.")
    async def list_permissions_async(self, page_size: Optional[int] = ..., client: glm.PermissionServiceAsyncClient | None = ...) -> AsyncIterable[permission_types.Permission]:
        ...
    
    def to_dict(self) -> dict[str, Any]:
        ...
    


def decode_document(document):
    ...

@string_utils.prettyprint
@dataclasses.dataclass()
class Document(abc.ABC):
    """
    A `Document` is a collection of `Chunk`s.
    """
    name: str
    display_name: str
    custom_metadata: list[CustomMetadata]
    create_time: datetime.datetime
    update_time: datetime.datetime
    def create_chunk(self, data: str | ChunkData, name: str | None = ..., custom_metadata: Iterable[CustomMetadata] | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Chunk:
        """
        Create a `Chunk` object which has textual data.

        Args:
            data: The content for the `Chunk`, such as the text string.
            name: The `Chunk` resource name. The ID (name excluding the "corpora/*/documents/*/chunks/" prefix) can contain up to 40 characters that are lowercase alphanumeric or dashes (-).
            custom_metadata: User provided custom metadata stored as key-value pairs.
            state: States for the lifecycle of a `Chunk`.
            request_options: Options for the request.

        Return:
            `Chunk` object with specified data.

        Raises:
            ValueError when chunk name not specified correctly.
        """
        ...
    
    async def create_chunk_async(self, data: str | ChunkData, name: str | None = ..., custom_metadata: Iterable[CustomMetadata] | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Chunk:
        """This is the async version of `Document.create_chunk`."""
        ...
    
    def batch_create_chunks(self, chunks: BatchCreateChunkOptions, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Create chunks within the given document.

        Args:
            chunks: `Chunks` to create.
            request_options: Options for the request.

        Return:
            Information about the created chunks.
        """
        ...
    
    async def batch_create_chunks_async(self, chunks: BatchCreateChunkOptions, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.batch_create_chunk`."""
        ...
    
    def get_chunk(self, name: str, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Get information about a specific chunk.

        Args:
            name: Name of `Chunk`.
            request_options: Options for the request.

        Returns:
            `Chunk` that was requested.
        """
        ...
    
    async def get_chunk_async(self, name: str, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.get_chunk`."""
        ...
    
    def list_chunks(self, page_size: int | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Iterable[Chunk]:
        """
        List chunks of a document.

        Args:
            page_size: Maximum number of `Chunk`s to request.
            request_options: Options for the request.

        Return:
            List of chunks in the document.
        """
        ...
    
    async def list_chunks_async(self, page_size: int | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> AsyncIterable[Chunk]:
        """This is the async version of `Document.list_chunks`."""
        ...
    
    def query(self, query: str, metadata_filters: Iterable[MetadataFilter] | None = ..., results_count: int | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> list[RelevantChunk]:
        """
        Query a `Document` in the `Corpus` for information.

        Args:
            query: Query string to perform semantic search.
            metadata_filters: Filter for `Chunk` metadata.
            results_count: The maximum number of `Chunk`s to return.

        Returns:
            List of relevant chunks.
        """
        ...
    
    async def query_async(self, query: str, metadata_filters: Iterable[MetadataFilter] | None = ..., results_count: int | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> list[RelevantChunk]:
        """This is the async version of `Document.query`."""
        ...
    
    def update(self, updates: dict[str, Any], client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Update a list of fields for a specified document.

        Args:
            updates: The list of fields to update.
            request_options: Options for the request.

        Return:
            `Chunk` object with specified updates.
        """
        ...
    
    async def update_async(self, updates: dict[str, Any], client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.update`."""
        ...
    
    def batch_update_chunks(self, chunks: BatchUpdateChunksOptions, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Update multiple chunks within the same document.

        Args:
            chunks: Data structure specifying which `Chunk`s to update and what the required updates are.
            request_options: Options for the request.

        Return:
            Updated `Chunk`s.
        """
        ...
    
    async def batch_update_chunks_async(self, chunks: BatchUpdateChunksOptions, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.batch_update_chunks`."""
        ...
    
    def delete_chunk(self, name: str, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Delete a `Chunk`.

        Args:
            name: The `Chunk` name.
            request_options: Options for the request.
        """
        ...
    
    async def delete_chunk_async(self, name: str, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.delete_chunk`."""
        ...
    
    def batch_delete_chunks(self, chunks: BatchDeleteChunkOptions, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Delete multiple `Chunk`s from a document.

        Args:
            chunks: Names of `Chunks` to delete.
            request_options: Options for the request.
        """
        ...
    
    async def batch_delete_chunks_async(self, chunks: BatchDeleteChunkOptions, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Document.batch_delete_chunks`."""
        ...
    
    def to_dict(self) -> dict[str, Any]:
        ...
    


def decode_chunk(chunk: protos.Chunk) -> Chunk:
    ...

@string_utils.prettyprint
@dataclasses.dataclass
class RelevantChunk:
    chunk_relevance_score: float
    chunk: Chunk
    ...


@string_utils.prettyprint
@dataclasses.dataclass(init=False)
class Chunk(abc.ABC):
    """
    A `Chunk` is part of the `Document`, or the actual text.
    """
    name: str
    data: ChunkData
    custom_metadata: list[CustomMetadata] | None
    state: State
    create_time: datetime.datetime | None
    update_time: datetime.datetime | None
    def __init__(self, name: str, data: ChunkData | str, custom_metadata: Iterable[CustomMetadata] | None, state: State, create_time: datetime.datetime | str | None = ..., update_time: datetime.datetime | str | None = ...) -> None:
        ...
    
    def update(self, updates: dict[str, Any], client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """
        Update a list of fields for a specified `Chunk`.

        Args:
            updates: List of fields to update for a `Chunk`.
            request_options: Options for the request.

        Return:
            Updated `Chunk` object.
        """
        ...
    
    async def update_async(self, updates: dict[str, Any], client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
        """This is the async version of `Chunk.update`."""
        ...
    
    def to_dict(self) -> dict[str, Any]:
        ...
    



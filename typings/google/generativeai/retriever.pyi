"""
This type stub file was generated by pyright.
"""

import google.ai.generativelanguage as glm
from typing import AsyncIterable, Iterable, Optional
from google.generativeai.types import helper_types, retriever_types

"""
This type stub file was generated by pyright.
"""
def create_corpus(name: str | None = ..., display_name: str | None = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> retriever_types.Corpus:
    """Calls the API to create a new `Corpus` by specifying either a corpus resource name as an ID or a display name, and returns the created `Corpus`.

    Args:
        name: The corpus resource name (ID). The name must be alphanumeric and fewer
            than 40 characters.
        display_name: The human readable display name. The display name must be fewer
            than 128 characters. All characters, including alphanumeric, spaces, and
            dashes are supported.
        request_options: Options for the request.

    Return:
        `retriever_types.Corpus` object with specified name or display name.

    Raises:
        ValueError: When the name is not specified or formatted incorrectly.
    """
    ...

async def create_corpus_async(name: str | None = ..., display_name: str | None = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> retriever_types.Corpus:
    """This is the async version of `retriever.create_corpus`."""
    ...

def get_corpus(name: str, client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> retriever_types.Corpus:
    """Calls the API to fetch a `Corpus` by name and returns the `Corpus`.

    Args:
        name: The `Corpus` name.
        request_options: Options for the request.

    Return:
        a `retriever_types.Corpus` of interest.
    """
    ...

async def get_corpus_async(name: str, client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> retriever_types.Corpus:
    """This is the async version of `retriever.get_corpus`."""
    ...

def delete_corpus(name: str, force: bool = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
    """Calls the API to remove a `Corpus` from the service, optionally deleting associated `Document`s and objects if the `force` parameter is set to true.

    Args:
        name: The `Corpus` name.
        force: If set to true, any `Document`s and objects related to this `Corpus` will also be deleted.
        request_options: Options for the request.

    """
    ...

async def delete_corpus_async(name: str, force: bool = ..., client: glm.RetrieverServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...):
    """This is the async version of `retriever.delete_corpus`."""
    ...

def list_corpora(*, page_size: Optional[int] = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> Iterable[retriever_types.Corpus]:
    """Calls the API to list all `Corpora` in the service and returns a list of paginated `Corpora`.

    Args:
        page_size: Maximum number of `Corpora` to request.
        page_token: A page token, received from a previous ListCorpora call.
        request_options: Options for the request.

    Return:
        Paginated list of `Corpora`.
    """
    ...

async def list_corpora_async(*, page_size: Optional[int] = ..., client: glm.RetrieverServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> AsyncIterable[retriever_types.Corpus]:
    """This is the async version of `retriever.list_corpora`."""
    ...


"""
This type stub file was generated by pyright.
"""

import dataclasses
import typing
import PIL.Image as PIL_Image
from typing import Any, Dict, Iterator, List, Literal, Optional
from google.generativeai import operations, protos
from google.protobuf import struct_pb2

"""
This type stub file was generated by pyright.
"""
if typing.TYPE_CHECKING:
    ...
else:
    ...
if typing.TYPE_CHECKING:
    ...
else:
    ...
def to_value(value) -> struct_pb2.Value:
    """Return a protobuf Value object representing this value."""
    ...

def to_list_value(value) -> struct_pb2.ListValue:
    ...

def to_mapping_value(value) -> struct_pb2.Struct:
    ...

ImageAspectRatio = Literal["1:1", "9:16", "16:9", "4:3", "3:4"]
IMAGE_ASPECT_RATIOS = ...
VideoAspectRatio = Literal["9:16", "16:9"]
VIDEO_ASPECT_RATIOS = ...
OutputMimeType = Literal["image/png", "image/jpeg"]
OUTPUT_MIME_TYPES = ...
SafetyFilterLevel = Literal["block_most", "block_some", "block_few", "block_fewest"]
SAFETY_FILTER_LEVELS = ...
PersonGeneration = Literal["dont_allow", "allow_adult", "allow_all"]
PERSON_GENERATIONS = ...
class Image:
    """Image."""
    _loaded_bytes: Optional[bytes] = ...
    _loaded_image: Optional[PIL_Image.Image] = ...
    def __init__(self, image_bytes: Optional[bytes]) -> None:
        """Creates an `Image` object.

        Args:
            image_bytes: Image file bytes. Image can be in PNG or JPEG format.
        """
        ...
    
    @staticmethod
    def load_from_file(location: str) -> Image:
        """Loads image from local file.

        Args:
            location: Local path uri from where to load
                the image.

        Returns:
            Loaded image as an `Image` object.
        """
        ...
    
    def show(self):
        """Shows the image.

        This method only works when in a notebook environment.
        """
        ...
    
    def save(self, location: str):
        """Saves image to a file.

        Args:
            location: Local path where to save the image.
        """
        ...
    


class Video:
    """Video."""
    _loaded_bytes: Optional[bytes] = ...
    def __init__(self, video_bytes: Optional[bytes] = ...) -> None:
        """Creates a `Video` object.
        Args:
            video_bytes: Video file bytes. Video can be in AVI, FLV, MKV, MOV,
                MP4, MPEG, MPG, WEBM, and WMV formats.
        """
        ...
    
    @staticmethod
    def load_from_file(location: str) -> Video:
        """Loads video from local file.
        Args:
            location: Local path from where to load the video.
        Returns:
            Loaded video as an `Video` object.
        """
        ...
    
    def save(self, location: str):
        """Saves video to a file.
        Args:
            location: Local path where to save the video.
        """
        ...
    


class ImageGenerationModel:
    """Generates images from text prompt.

    Examples:

        model = ImageGenerationModel("imagen-3.0-generate-001")
        response = model.generate_images(
            prompt="Astronaut riding a horse",
            # Optional:
            number_of_images=1,
        )
        response[0].save("image1.png")
    """
    def __init__(self, model_id: str = ...) -> None:
        ...
    
    @classmethod
    def from_pretrained(cls, model_name: str = ...):
        """For vertex compatibility"""
        ...
    
    def generate_images(self, prompt: str, *, negative_prompt: Optional[str] = ..., number_of_images: int = ..., aspect_ratio: Optional[ImageAspectRatio] = ..., guidance_scale: Optional[float] = ..., language: Optional[str] = ..., safety_filter_level: Optional[SafetyFilterLevel] = ..., person_generation: Optional[PersonGeneration] = ...) -> ImageGenerationResponse:
        """Generates images from text prompt.

        Args:
            prompt: Text prompt for the image.
            negative_prompt: A description of what you want to omit in the generated
                images.
            number_of_images: Number of images to generate. Range: 1..8.
            aspect_ratio: Changes the aspect ratio of the generated image Supported
                values are:
                * "1:1" : 1:1 aspect ratio
                * "9:16" : 9:16 aspect ratio
                * "16:9" : 16:9 aspect ratio
                * "4:3" : 4:3 aspect ratio
                * "3:4" : 3:4 aspect_ratio
            guidance_scale: Controls the strength of the prompt. Suggested values are:
                * 0-9 (low strength)
                * 10-20 (medium strength)
                * 21+ (high strength)
            language: Language of the text prompt for the image. Default: None.
                Supported values are `"en"` for English, `"hi"` for Hindi, `"ja"`
                for Japanese, `"ko"` for Korean, and `"auto"` for automatic language
                detection.
            safety_filter_level: Adds a filter level to Safety filtering. Supported
                values are:
                * "block_most" : Strongest filtering level, most strict
                blocking
                * "block_some" : Block some problematic prompts and responses
                * "block_few" : Block fewer problematic prompts and responses
                * "block_fewest" : Block very few problematic prompts and responses
            person_generation: Allow generation of people by the model Supported
                values are:
                * "dont_allow" : Block generation of people
                * "allow_adult" : Generate adults, but not children
                * "allow_all" : Generate adults and children
        Returns:
            An `ImageGenerationResponse` object.
        """
        ...
    


@dataclasses.dataclass
class ImageGenerationResponse:
    """Image generation response.

    Attributes:
        images: The list of generated images.
    """
    __module__ = ...
    images: List[GeneratedImage]
    def __iter__(self) -> typing.Iterator[GeneratedImage]:
        """Iterates through the generated images."""
        ...
    
    def __getitem__(self, idx: int) -> GeneratedImage:
        """Gets the generated image by index."""
        ...
    


_EXIF_USER_COMMENT_TAG_IDX = ...
_IMAGE_GENERATION_PARAMETERS_EXIF_KEY = ...
class GeneratedImage(Image):
    """Generated image."""
    __module__ = ...
    def __init__(self, image_bytes: Optional[bytes], generation_parameters: Dict[str, Any]) -> None:
        """Creates a `GeneratedImage` object.

        Args:
            image_bytes: Image file bytes. Image can be in PNG or JPEG format.
            generation_parameters: Image generation parameter values.
        """
        ...
    
    @property
    def generation_parameters(self):
        """Image generation parameters as a dictionary."""
        ...
    
    @staticmethod
    def load_from_file(location: str) -> GeneratedImage:
        """Loads image from file.

        Args:
            location: Local path from where to load the image.

        Returns:
            Loaded image as a `GeneratedImage` object.
        """
        ...
    
    def save(self, location: str, include_generation_parameters: bool = ...):
        """Saves image to a file.

        Args:
            location: Local path where to save the image.
            include_generation_parameters: Whether to include the image
                generation parameters in the image's EXIF metadata.
        """
        ...
    


class VideoGenerationModel:
    """Generates images from text prompt.

    Examples::

        model = VideoGenerationModel("veo-001-preview-0815")
        response = model.generate_images(
            prompt="Astronaut riding a horse",
            # Optional:
            number_of_images=1,
        )
        response[0].save("image1.png")
    """
    def __init__(self, model_id: str = ...) -> None:
        ...
    
    @classmethod
    def from_pretrained(cls, model_name: str = ...):
        """For vertex compatibility"""
        ...
    
    def generate_video(self, prompt: str, *, aspect_ratio: Optional[VideoAspectRatio] = ..., person_generation: Optional[PersonGeneration] = ...) -> VideoGenerationResponse:
        """Generates images from text prompt.

        Args:
            prompt: Text prompt for the image.
            aspect_ratio: Changes the aspect ratio of the generated image Supported
                values are:
                * "9:16" : 9:16 aspect ratio
                * "16:9" : 16:9 aspect ratio
            person_generation: Allow generation of people by the model Supported
                values are:
                * "dont_allow" : Block generation of people
                * "allow_adult" : Generate adults, but not children
                * "allow_all" : Generate adults and children
        Returns:
            An `ImageGenerationResponse` object.
        """
        ...
    


class GenerateVideoOperation(operations.BaseOperation):
    def set_result(self, result) -> Video:
        ...
    
    def wait_bar(self, **kwargs) -> Iterator[protos.PredictLongRunningMetadata]:
        """A tqdm wait bar, yields `Operation` statuses until complete.

        Args:
            **kwargs: passed through to `tqdm.auto.tqdm(..., **kwargs)`

        Yields:
            Operation statuses as `protos.CreateTunedModelMetadata` objects.
        """
        ...
    



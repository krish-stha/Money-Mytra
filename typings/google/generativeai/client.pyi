"""
This type stub file was generated by pyright.
"""

import os
import contextlib
import dataclasses
import pathlib
import google.ai.generativelanguage as glm
import google.generativeai.protos as protos
from typing import Any
from collections.abc import Sequence
from io import IOBase
from google.auth import credentials as ga_credentials
from google.api_core import client_options as client_options_lib, gapic_v1, operations_v1

"""
This type stub file was generated by pyright.
"""
__version__ = ...
USER_AGENT = ...
GENAI_API_DISCOVERY_URL = ...
@contextlib.contextmanager
def patch_colab_gce_credentials():
    ...

class FileServiceClient(glm.FileServiceClient):
    def __init__(self, *args, **kwargs) -> None:
        ...
    
    def create_file(self, path: str | pathlib.Path | os.PathLike | IOBase, *, mime_type: str | None = ..., name: str | None = ..., display_name: str | None = ..., resumable: bool = ..., metadata: Sequence[tuple[str, str]] = ...) -> protos.File:
        ...
    


class FileServiceAsyncClient(glm.FileServiceAsyncClient):
    async def create_file(self, *args, **kwargs):
        ...
    


@dataclasses.dataclass
class _ClientManager:
    client_config: dict[str, Any] = ...
    default_metadata: Sequence[tuple[str, str]] = ...
    clients: dict[str, Any] = ...
    def configure(self, *, api_key: str | None = ..., credentials: ga_credentials.Credentials | dict | None = ..., transport: str | None = ..., client_options: client_options_lib.ClientOptions | dict[str, Any] | None = ..., client_info: gapic_v1.client_info.ClientInfo | None = ..., default_metadata: Sequence[tuple[str, str]] = ...) -> None:
        """Initializes default client configurations using specified parameters or environment variables.

        If no API key has been provided (either directly, or on `client_options`) and the
        `GEMINI_API_KEY` environment variable is set, it will be used as the API key. If not,
        if the `GOOGLE_API_KEY` environement variable is set, it will be used as the API key.

        Note: Not all arguments are detailed below. Refer to the `*ServiceClient` classes in
        `google.ai.generativelanguage` for details on the other arguments.

        Args:
            transport: A string, one of: [`rest`, `grpc`, `grpc_asyncio`].
            api_key: The API-Key to use when creating the default clients (each service uses
                a separate client). This is a shortcut for `client_options={"api_key": api_key}`.
                If omitted, and the `GEMINI_API_KEY` or the `GOOGLE_API_KEY` environment variable
                are set, they will be used in this order of priority.
            default_metadata: Default (key, value) metadata pairs to send with every request.
                when using `transport="rest"` these are sent as HTTP headers.
        """
        ...
    
    def make_client(self, name):
        ...
    
    def get_default_client(self, name):
        ...
    
    def get_default_operations_client(self) -> operations_v1.OperationsClient:
        ...
    


def configure(*, api_key: str | None = ..., credentials: ga_credentials.Credentials | dict | None = ..., transport: str | None = ..., client_options: client_options_lib.ClientOptions | dict | None = ..., client_info: gapic_v1.client_info.ClientInfo | None = ..., default_metadata: Sequence[tuple[str, str]] = ...):
    """Captures default client configuration.

    If no API key has been provided (either directly, or on `client_options`) and the
    `GOOGLE_API_KEY` environment variable is set, it will be used as the API key.

    Note: Not all arguments are detailed below. Refer to the `*ServiceClient` classes in
    `google.ai.generativelanguage` for details on the other arguments.

    Args:
        transport: A string, one of: [`rest`, `grpc`, `grpc_asyncio`].
        api_key: The API-Key to use when creating the default clients (each service uses
            a separate client). This is a shortcut for `client_options={"api_key": api_key}`.
            If omitted, and the `GOOGLE_API_KEY` environment variable is set, it will be
            used.
        default_metadata: Default (key, value) metadata pairs to send with every request.
            when using `transport="rest"` these are sent as HTTP headers.
    """
    ...

_client_manager = ...
def get_default_cache_client() -> glm.CacheServiceClient:
    ...

def get_default_file_client() -> glm.FilesServiceClient:
    ...

def get_default_file_async_client() -> glm.FilesServiceAsyncClient:
    ...

def get_default_generative_client() -> glm.GenerativeServiceClient:
    ...

def get_default_generative_async_client() -> glm.GenerativeServiceAsyncClient:
    ...

def get_default_operations_client() -> operations_v1.OperationsClient:
    ...

def get_default_model_client() -> glm.ModelServiceAsyncClient:
    ...

def get_default_retriever_client() -> glm.RetrieverClient:
    ...

def get_default_retriever_async_client() -> glm.RetrieverAsyncClient:
    ...

def get_default_permission_client() -> glm.PermissionServiceClient:
    ...

def get_default_permission_async_client() -> glm.PermissionServiceAsyncClient:
    ...


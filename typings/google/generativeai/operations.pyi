"""
This type stub file was generated by pyright.
"""

from typing import Iterator
from google.generativeai import protos
from google.api_core import operation as operation_lib

"""
This type stub file was generated by pyright.
"""
def list_operations(*, client=...) -> Iterator[CreateTunedModelOperation]:
    """Calls the API to list all operations"""
    ...

def get_operation(name: str, *, client=...) -> CreateTunedModelOperation:
    """Calls the API to get a specific operation"""
    ...

def delete_operation(name: str, *, client=...):
    """Calls the API to delete a specific operation"""
    ...

class CreateTunedModelOperation(operation_lib.Operation):
    @classmethod
    def from_proto(cls, proto, client):
        """
        result = getattr(proto, 'result', None)
        if result is not None:
            if result.value == b'':
                del proto.result
        """
        ...
    
    @classmethod
    def from_core_operation(cls, operation: operation_lib.Operation):
        ...
    
    @property
    def name(self) -> str:
        ...
    
    def update(self):
        """Refresh the current statuses in metadata/result/error"""
        ...
    
    def wait_bar(self, **kwargs) -> Iterator[protos.CreateTunedModelMetadata]:
        """A tqdm wait bar, yields `Operation` statuses until complete.

        Args:
            **kwargs: passed through to `tqdm.auto.tqdm(..., **kwargs)`

        Yields:
            Operation statuses as `protos.CreateTunedModelMetadata` objects.
        """
        ...
    
    def set_result(self, result: protos.TunedModel):
        ...
    


def from_gapic(cls, *, operation, operations_client, result_type, metadata_type, grpc_metadata=..., **kwargs):
    """`google.api_core.operation.from_gapic`, patched to allow subclasses."""
    ...


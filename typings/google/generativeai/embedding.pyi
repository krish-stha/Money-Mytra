"""
This type stub file was generated by pyright.
"""

import google.ai.generativelanguage as glm
from typing import Iterable, Union, overload
from google.generativeai import protos
from google.generativeai.types import content_types, helper_types, model_types, text_types

"""
This type stub file was generated by pyright.
"""
DEFAULT_EMB_MODEL = ...
EMBEDDING_MAX_BATCH_SIZE = ...
EmbeddingTaskType = protos.TaskType
EmbeddingTaskTypeOptions = Union[int, str, EmbeddingTaskType]
_EMBEDDING_TASK_TYPE: dict[EmbeddingTaskTypeOptions, EmbeddingTaskType] = ...
def to_task_type(x: EmbeddingTaskTypeOptions) -> EmbeddingTaskType:
    ...

_batched = ...
@overload
def embed_content(model: model_types.BaseModelNameOptions, content: content_types.ContentType, task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.EmbeddingDict:
    ...

@overload
def embed_content(model: model_types.BaseModelNameOptions, content: Iterable[content_types.ContentType], task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.BatchEmbeddingDict:
    ...

def embed_content(model: model_types.BaseModelNameOptions, content: content_types.ContentType | Iterable[content_types.ContentType], task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceClient = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.EmbeddingDict | text_types.BatchEmbeddingDict:
    """Calls the API to create embeddings for content passed in.

    Args:
        model:
            Which [model](https://ai.google.dev/models/gemini#embedding) to
            call, as a string or a `types.Model`.

        content:
            Content to embed.

        task_type:
            Optional task type for which the embeddings will be used. Can only
            be set for `models/embedding-001`.

        title:
            An optional title for the text. Only applicable when task_type is
            `RETRIEVAL_DOCUMENT`.

        output_dimensionality:
            Optional reduced dimensionality for the output embeddings. If set,
            excessive values from the output embeddings will be truncated from
            the end.

        request_options:
            Options for the request.

    Return:
        Dictionary containing the embedding (list of float values) for the
        input content.
    """
    ...

@overload
async def embed_content_async(model: model_types.BaseModelNameOptions, content: content_types.ContentType, task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.EmbeddingDict:
    ...

@overload
async def embed_content_async(model: model_types.BaseModelNameOptions, content: Iterable[content_types.ContentType], task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceAsyncClient | None = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.BatchEmbeddingDict:
    ...

async def embed_content_async(model: model_types.BaseModelNameOptions, content: content_types.ContentType | Iterable[content_types.ContentType], task_type: EmbeddingTaskTypeOptions | None = ..., title: str | None = ..., output_dimensionality: int | None = ..., client: glm.GenerativeServiceAsyncClient = ..., request_options: helper_types.RequestOptionsType | None = ...) -> text_types.EmbeddingDict | text_types.BatchEmbeddingDict:
    """Calls the API to create async embeddings for content passed in."""
    ...


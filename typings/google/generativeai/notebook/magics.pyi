"""
This type stub file was generated by pyright.
"""

import abc
from google.auth import credentials
from google.generativeai.notebook import ipython_env, sheets_utils
from IPython.core import magic

"""Colab Magics class.

Installs %%llm magics.
"""
SheetsInputs = sheets_utils.SheetsInputs
SheetsOutputs = sheets_utils.SheetsOutputs
post_process_add_fn = ...
post_process_replace_fn = ...
_ipython_env: ipython_env.IPythonEnv | None = ...
def authorize(creds: credentials.Credentials) -> None:
    """Sets up credentials.

    This is used for interacting Google APIs, such as Google Sheets.

    Args:
      creds: The credentials that will be used (e.g. to read from Google Sheets.)
    """
    ...

class AbstractMagics(abc.ABC):
    """Defines interface to Magics class."""
    @abc.abstractmethod
    def llm(self, cell_line: str | None, cell_body: str | None):
        """Perform various LLM-related operations.

        Args:
          cell_line: String to pass to the MagicsEngine.
          cell_body: Contents of the cell body.
        """
        ...
    


class MagicsImpl(AbstractMagics):
    """Actual class implementing the magics functionality.

    We use a separate class to ensure a single, global instance
    of the magics class.
    """
    def __init__(self) -> None:
        ...
    
    def llm(self, cell_line: str | None, cell_body: str | None): # -> ParserNormalExit | None:
        """Perform various LLM-related operations.

        Args:
          cell_line: String to pass to the MagicsEngine.
          cell_body: Contents of the cell body.

        Returns:
          Results from running MagicsEngine.
        """
        ...
    


@magic.magics_class
class Magics(magic.Magics):
    """Class to register the magic with Colab.

    Objects of this class delegate all calls to a single,
    global instance.
    """
    _instance = ...
    @classmethod
    def get_instance(cls) -> AbstractMagics:
        """Retrieve global instance of the Magics object."""
        ...
    
    @magic.line_cell_magic
    def llm(self, cell_line: str | None, cell_body: str | None):
        """Perform various LLM-related operations.

        Args:
          cell_line: String to pass to the MagicsEngine.
          cell_body: Contents of the cell body.

        Returns:
          Results from running MagicsEngine.
        """
        ...
    
    @magic.line_cell_magic
    def palm(self, cell_line: str | None, cell_body: str | None): # -> ...:
        ...
    
    @magic.line_cell_magic
    def gemini(self, cell_line: str | None, cell_body: str | None): # -> ...:
        ...
    



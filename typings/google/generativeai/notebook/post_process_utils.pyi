"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Callable, Sequence
from google.generativeai.notebook.lib import llm_function, llmfn_output_row, llmfn_post_process

"""Utilities for working with post-processing tokens."""
class PostProcessParseError(RuntimeError):
    """An error parsing the post-processing tokens."""
    ...


class ParsedPostProcessExpr(abc.ABC):
    """A post-processing expression parsed from the command line."""
    @abc.abstractmethod
    def name(self) -> str:
        """Returns the name of this expression."""
        ...
    
    @abc.abstractmethod
    def add_to_llm_function(self, llm_fn: llm_function.LLMFunction) -> llm_function.LLMFunction:
        """Adds this parsed expression to `llm_fn` as a post-processing command."""
        ...
    


class _ParsedPostProcessAddExpr(ParsedPostProcessExpr, llmfn_post_process.LLMFnPostProcessBatchAddFn):
    """An expression that returns the value of a new column to add to a row."""
    def __init__(self, name: str, fn: Callable[[str], Any]) -> None:
        """Constructor.

        Args:
          name: The name of the expression. The name of the new column will be
            derived from this.
          fn: A function that takes the result of a row and returns a new value to
            add as a new column in the row.
        """
        ...
    
    def name(self) -> str:
        ...
    
    def __call__(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[Any]:
        ...
    
    def add_to_llm_function(self, llm_fn: llm_function.LLMFunction) -> llm_function.LLMFunction:
        ...
    


class _ParsedPostProcessReplaceExpr(ParsedPostProcessExpr, llmfn_post_process.LLMFnPostProcessBatchReplaceFn):
    """An expression that returns the new result value for a row."""
    def __init__(self, name: str, fn: Callable[[str], str]) -> None:
        """Constructor.

        Args:
          name: The name of the expression.
          fn: A function that takes the result of a row and returns the new result.
        """
        ...
    
    def name(self) -> str:
        ...
    
    def __call__(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[str]:
        ...
    
    def add_to_llm_function(self, llm_fn: llm_function.LLMFunction) -> llm_function.LLMFunction:
        ...
    


def post_process_add_fn(fn: Callable[[str], Any]): # -> _ParsedPostProcessAddExpr:
    ...

def post_process_replace_fn(fn: Callable[[str], str]): # -> _ParsedPostProcessReplaceExpr:
    ...

def validate_one_post_processing_expression(tokens: Sequence[str]) -> None:
    ...

def resolve_post_processing_tokens(tokens: Sequence[Sequence[str]]) -> Sequence[ParsedPostProcessExpr]:
    """Resolves post-processing tokens into ParsedPostProcessExprs.

    E.g. Given [["add_length"], ["to_upper"]] as input, this function will return
    a sequence of ParsedPostProcessExprs that will execute add_length() and
    to_upper() on each entry of the LLM output as post-processing operations.

    Raises:
      PostProcessParseError: An error parsing or resolving the tokens.

    Args:
      tokens: A sequence of post-processing tokens after splitting.

    Returns:
      A sequence of ParsedPostProcessExprs.
    """
    ...


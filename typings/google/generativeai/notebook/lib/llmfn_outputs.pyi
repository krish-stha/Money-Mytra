"""
This type stub file was generated by pyright.
"""

import abc
import dataclasses
import pandas
from typing import Any, Callable, Iterable, Iterator, Mapping, Sequence, overload
from google.generativeai.notebook.lib import llmfn_output_row, model as model_lib

"""Output of LLMFunction."""
class ColumnNames:
    """Names of columns that are used to represent output."""
    PROMPT_NUM = ...
    INPUT_NUM = ...
    RESULT_NUM = ...
    MODEL_INPUT = ...
    PROMPT_VARS = ...
    TEXT_RESULT = ...


@dataclasses.dataclass
class LLMFnOutputEntry:
    """The output of a single model input from LLMFunction.

    A model input is a prompt where the keyword placeholders have been
    substituted (by `prompt_vars`).

    E.g. If we have:
      prompt: "the opposite of {word} is"
      prompt_vars: {"word", "hot"}
    Then we will have the following model input:
      model_input: "the opposite of hot is"

    Note: The model may produce one-or-more results for a given model_input.
    This is represented by the sequence `output_rows`.
    """
    prompt_num: int
    input_num: int
    prompt_vars: Mapping[str, str]
    output_rows: Sequence[llmfn_output_row.LLMFnOutputRow]
    prompt: str | None = ...
    model_input: str | None = ...
    model_results: model_lib.ModelResults | None = ...


class LLMFnOutputsBase(Sequence[LLMFnOutputEntry]):
    """Parent class for LLMFnOutputs.

    This class exists mainly to avoid a circular dependency between LLMFnOutputs
    and LLMFnOutputsSink. Most users should use LLMFnOutputs directly instead.
    """
    def __init__(self, outputs: Iterable[LLMFnOutputEntry] | None = ...) -> None:
        """Constructor.

        Args:
          outputs: The contents of this LLMFnOutputs instance.
        """
        ...
    
    def __iter__(self) -> Iterator[LLMFnOutputEntry]:
        ...
    
    def __len__(self) -> int:
        ...
    
    @overload
    def __getitem__(self, x: int) -> LLMFnOutputEntry:
        ...
    
    @overload
    def __getitem__(self, x: slice) -> Sequence[LLMFnOutputEntry]:
        ...
    
    def __getitem__(self, x: int | slice) -> LLMFnOutputEntry | Sequence[LLMFnOutputEntry]:
        ...
    
    def __bool__(self) -> bool:
        ...
    
    def __str__(self) -> str:
        ...
    
    def as_dict(self) -> Mapping[str, Sequence[Any]]:
        """Formats returned results as dictionary."""
        ...
    
    def as_pandas_dataframe(self) -> pandas.DataFrame:
        ...
    


class LLMFnOutputsSink(abc.ABC):
    """Abstract class representing an exporter for the output of LLMFunction.

    This class could be extended to write to external documents, such as
    Google Sheets.
    """
    def write_outputs(self, outputs: LLMFnOutputsBase) -> None:
        """Writes `outputs` to some destination."""
        ...
    


class LLMFnOutputs(LLMFnOutputsBase):
    """A sequence of LLMFnOutputEntry instances.

    Notes:
    - Each LLMFnOutputEntry represents the results of running one model
      input (see documentation for LLMFnOutputEntry for what "model input"
      means.)
    - A single model input may produce more-than-one text results.
    """
    def __init__(self, outputs: Iterable[LLMFnOutputEntry] | None = ..., ipython_display_fn: Callable[[LLMFnOutputs], None] | None = ...) -> None:
        """Constructor.

        Args:
          outputs: The contents of this LLMFnOutputs instance.
          ipython_display_fn: An optional function for pretty-printing this instance
            when it is the output of a cell in a notebook. If this argument is not
            None, the _ipython_display_ method will be defined which will in turn
            invoke this function.
        """
        ...
    
    def export(self, sink: LLMFnOutputsSink) -> None:
        """Export contents to `sink`."""
        ...
    



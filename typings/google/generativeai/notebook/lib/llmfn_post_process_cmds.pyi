"""
This type stub file was generated by pyright.
"""

import abc
from typing import Sequence
from google.generativeai.notebook.lib import llmfn_output_row, llmfn_post_process

"""Internal representation of post-process commands for LLMFunction.

This module is internal to LLMFunction and should only be used by
llm_function.py.
"""
class LLMFnPostProcessCommand(abc.ABC):
    """Abstract class representing post-processing commands."""
    @abc.abstractmethod
    def name(self) -> str:
        """Returns the name of this post-processing command."""
        ...
    


class LLMFnImplPostProcessCommand(LLMFnPostProcessCommand):
    """Post-processing commands for LLMFunctionImpl."""
    @abc.abstractmethod
    def run(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        """Processes a batch of results and returns a new batch.

        Args:
          rows: The rows in a batch. Note that `rows` are not guaranteed to be
            remain unmodified.

        Returns:
          A new set of rows that should replace the batch.
        """
        ...
    


class LLMFnPostProcessReorderCommand(LLMFnImplPostProcessCommand):
    """A batch command processes a set of results at once.

    Note that a "batch" represents a set of results coming from a single prompt,
    as the model may produce more-than-one result for a prompt.
    """
    def __init__(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchReorderFn) -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def run(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        ...
    


class LLMFnPostProcessAddCommand(LLMFnImplPostProcessCommand):
    """A command that adds each row with a new column.

    This does not change the value of the results cell.
    """
    def __init__(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchAddFn) -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def run(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        ...
    


class LLMFnPostProcessReplaceCommand(LLMFnImplPostProcessCommand):
    """A command that modifies the results in each row."""
    def __init__(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchReplaceFn) -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def run(self, rows: Sequence[llmfn_output_row.LLMFnOutputRowView]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        ...
    


class LLMCompareFnPostProcessCommand(LLMFnPostProcessCommand):
    """Post-processing commands for LLMCompareFunction."""
    @abc.abstractmethod
    def run(self, rows: Sequence[tuple[llmfn_output_row.LLMFnOutputRowView, llmfn_output_row.LLMFnOutputRowView, llmfn_output_row.LLMFnOutputRowView,]]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        """Processes a batch of left- and right-hand side results.

        Args:
          rows: The rows in a batch. Each row is a three-tuple containing: - The
            left-hand side results, - The right-hand side results, and - The current
            combined results

        Returns:
          A new set of rows that should replace the combined results.
        """
        ...
    


class LLMCompareFnPostProcessAddCommand(LLMCompareFnPostProcessCommand):
    """A command that adds each row with a new column.

    This does not change the value of the results cell.
    """
    def __init__(self, name: str, fn: llmfn_post_process.LLMCompareFnPostProcessBatchAddFn) -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def run(self, rows: Sequence[tuple[llmfn_output_row.LLMFnOutputRowView, llmfn_output_row.LLMFnOutputRowView, llmfn_output_row.LLMFnOutputRowView,]]) -> Sequence[llmfn_output_row.LLMFnOutputRow]:
        ...
    



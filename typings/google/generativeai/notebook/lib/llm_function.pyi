"""
This type stub file was generated by pyright.
"""

import abc
import dataclasses
from typing import AbstractSet, Any, Callable, Mapping, Sequence, Union
from google.generativeai.notebook.lib import llmfn_input_utils, llmfn_output_row, llmfn_outputs, llmfn_post_process, model as model_lib

"""LLMFunction."""
CompareFn = Callable[[llmfn_output_row.LLMFnOutputRowView, llmfn_output_row.LLMFnOutputRowView], Any,]
@dataclasses.dataclass
class _PromptInfo:
    prompt_num: int
    prompt: str
    input_num: int
    prompt_vars: Mapping[str, str]
    model_input: str
    ...


class LLMFunction(Callable[[Union[llmfn_input_utils.LLMFunctionInputs, None]], llmfn_outputs.LLMFnOutputs,], metaclass=abc.ABCMeta):
    """Base class for LLMFunctionImpl and LLMCompareFunction."""
    def __init__(self, outputs_ipython_display_fn: Callable[[llmfn_outputs.LLMFnOutputs], None] | None = ...) -> None:
        """Constructor.

        Args:
          outputs_ipython_display_fn: Optional function that will be used to
            override how the outputs of this LLMFunction will be displayed in a
            notebook (See further documentation in LLMFnOutputs.__init__().)
        """
        ...
    
    @abc.abstractmethod
    def get_placeholders(self) -> AbstractSet[str]:
        """Returns the placeholders that should be present in inputs for this function."""
        ...
    
    def __call__(self, inputs: llmfn_input_utils.LLMFunctionInputs | None = ...) -> llmfn_outputs.LLMFnOutputs:
        """Runs and returns results based on `inputs`."""
        ...
    
    def add_post_process_reorder_fn(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchReorderFn) -> LLMFunction:
        ...
    
    def add_post_process_add_fn(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchAddFn) -> LLMFunction:
        ...
    
    def add_post_process_replace_fn(self, name: str, fn: llmfn_post_process.LLMFnPostProcessBatchReplaceFn) -> LLMFunction:
        ...
    


class LLMFunctionImpl(LLMFunction):
    """Callable class that executes the contents of a Magics cell.

    An LLMFunction is constructed from the Magics command line and cell contents
    specified by the user. It is defined by:
    - A model instance,
    - Model arguments
    - A prompt template (e.g. "the opposite of hot is {word}") with an optional
      keyword placeholder.

    The LLMFunction takes as its input a sequence of dictionaries containing
    values for keyword replacement, e.g. [{"word": "hot"}, {"word": "tall"}].

    This will cause the model to be executed with the following prompts:
      "The opposite of hot is"
      "The opposite of tall is"

    The results will be returned in a LLMFnOutputs instance.
    """
    def __init__(self, model: model_lib.AbstractModel, prompts: Sequence[str], model_args: model_lib.ModelArguments | None = ..., outputs_ipython_display_fn: Callable[[llmfn_outputs.LLMFnOutputs], None] | None = ...) -> None:
        """Constructor.

        Args:
          model: The model that the prompts will execute on.
          prompts: A sequence of prompt templates with optional placeholders. The
            placeholders will be replaced by the inputs passed into this function.
          model_args: Optional set of model arguments to configure how the model
            executes the prompts.
          outputs_ipython_display_fn: See documentation in LLMFunction.__init__().
        """
        ...
    
    def get_placeholders(self) -> AbstractSet[str]:
        ...
    


class LLMCompareFunction(LLMFunction):
    """LLMFunction for comparisons.

    LLMCompareFunction runs an input over a pair of LLMFunctions and compares the
    result.
    """
    def __init__(self, lhs_name_and_fn: tuple[str, LLMFunction], rhs_name_and_fn: tuple[str, LLMFunction], compare_name_and_fns: Sequence[tuple[str, CompareFn]] | None = ..., outputs_ipython_display_fn: Callable[[llmfn_outputs.LLMFnOutputs], None] | None = ...) -> None:
        """Constructor.

        Args:
          lhs_name_and_fn: Name and function for the left-hand side of the
            comparison.
          rhs_name_and_fn: Name and function for the right-hand side of the
            comparison.
          compare_name_and_fns: Optional names and functions for comparing the
            results of the left- and right-hand sides.
          outputs_ipython_display_fn: See documentation in LLMFunction.__init__().
        """
        ...
    
    def get_placeholders(self) -> AbstractSet[str]:
        ...
    
    def add_compare_post_process_add_fn(self, name: str, fn: llmfn_post_process.LLMCompareFnPostProcessBatchAddFn) -> LLMFunction:
        ...
    



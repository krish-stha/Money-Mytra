"""
This type stub file was generated by pyright.
"""

import abc
import argparse
import dataclasses
import enum
from typing import Any, Callable, Sequence, Tuple, Union
from google.generativeai.notebook.lib import llmfn_inputs_source, llmfn_outputs

"""Classes that define arguments for populating ArgumentParser.

The argparse module's ArgumentParser.add_argument() takes several parameters and
is quite customizable. However this can lead to bugs where arguments do not
behave as expected.

For better ease-of-use and better testability, define a set of classes for the
types of flags used by LLM Magics.

Sample usage:

  str_flag = SingleValueFlagDef(name="title", required=True)
  enum_flag = EnumFlagDef(name="colors", required=True, enum_type=ColorsEnum)

  str_flag.add_argument_to_parser(my_parser)
  enum_flag.add_argument_to_parser(my_parser)
"""
_PARSETYPES = Union[str, int, float]
_DESTTYPES = Union[_PARSETYPES, enum.Enum, Tuple[str, Callable[[str, str], Any]], Sequence[str], llmfn_inputs_source.LLMFnInputsSource, llmfn_outputs.LLMFnOutputsSink,]
_PARSEFN = Callable[[_PARSETYPES], _DESTTYPES]
@dataclasses.dataclass(frozen=True)
class FlagDef(abc.ABC):
    """Abstract base class for flag definitions.

    Attributes:
      name: Long name, e.g. "colors" will define the flag "--colors".
      required: Whether the flag must be provided on the command line.
      short_name: Optional short name.
      parse_type: The type that ArgumentParser should parse the command line
        argument to.
      dest_type: The type that the parsed value is converted to. This is used when
        we want ArgumentParser to parse as one type, then convert to a different
        type. E.g. for enums we parse as "str" then convert to the desired enum
        type in order to provide cleaner help messages.
      parse_to_dest_type_fn: If provided, this function will be used to convert
        the value from `parse_type` to `dest_type`. This can be used for
        validation as well.
      choices: If provided, limit the set of acceptable values to these choices.
      help_msg: If provided, adds help message when -h is used in the command
        line.
    """
    name: str
    required: bool = ...
    short_name: str | None = ...
    parse_type: type[_PARSETYPES] = ...
    dest_type: type[_DESTTYPES] | None = ...
    parse_to_dest_type_fn: _PARSEFN | None = ...
    choices: list[_PARSETYPES] | None = ...
    help_msg: str | None = ...
    @abc.abstractmethod
    def add_argument_to_parser(self, parser: argparse.ArgumentParser) -> None:
        """Adds this flag as an argument to `parser`.

        Child classes should implement this as a call to parser.add_argument()
        with the appropriate parameters.

        Args:
          parser: The parser to which this argument will be added.
        """
        ...
    
    def __post_init__(self): # -> None:
        ...
    


class _SingleValueStoreAction(argparse.Action):
    """Custom Action for storing a value in an argparse.Namespace.

    This action checks that the flag is specified at-most once.
    """
    def __init__(self, option_strings, dest, dest_type: type[Any], parse_to_dest_type_fn: _PARSEFN, **kwargs) -> None:
        ...
    
    def __call__(self, parser: argparse.ArgumentParser, namespace: argparse.Namespace, values: str | Sequence[Any] | None, option_string: str | None = ...): # -> None:
        ...
    


class _MultiValuesAppendAction(argparse.Action):
    """Custom Action for appending values in an argparse.Namespace.

    This action checks that the flag is specified at-most once.
    """
    def __init__(self, option_strings, dest, dest_type: type[Any], parse_to_dest_type_fn: _PARSEFN, **kwargs) -> None:
        ...
    
    def __call__(self, parser: argparse.ArgumentParser, namespace: argparse.Namespace, values: str | Sequence[Any] | None, option_string: str | None = ...): # -> None:
        ...
    


class _BooleanValueStoreAction(argparse.Action):
    """Custom Action for setting a boolean value in argparse.Namespace.

    The boolean flag expects the default to be False and will set the value to
    True.
    This action checks that the flag is specified at-most once.
    """
    def __init__(self, option_strings, dest, **kwargs) -> None:
        ...
    
    def __call__(self, parser: argparse.ArgumentParser, namespace: argparse.Namespace, values: str | Sequence[Any] | None, option_string: str | None = ...): # -> None:
        ...
    


@dataclasses.dataclass(frozen=True)
class SingleValueFlagDef(FlagDef):
    """Definition for a flag that takes a single value.

    Sample usage:
      # This defines a flag that can be specified on the command line as:
      #   --count=10
      flag = SingleValueFlagDef(name="count", parse_type=int, required=True)
      flag.add_argument_to_parser(argument_parser)

    Attributes:
      default_value: Default value for optional flags.
    """
    class _DefaultValue(enum.Enum):
        """Special value to represent "no value provided".

        "None" can be used as a default value, so in order to differentiate between
        "None" and "no value provided", create a special value for "no value
        provided".
        """
        NOT_SET = ...
    
    
    default_value: _DESTTYPES | _DefaultValue | None = ...
    def add_argument_to_parser(self, parser: argparse.ArgumentParser) -> None:
        ...
    


class EnumFlagDef(SingleValueFlagDef):
    """Definition for a flag that takes a value from an Enum.

    Sample usage:
      # This defines a flag that can be specified on the command line as:
      #   --color=red
      flag = SingleValueFlagDef(name="color", enum_type=ColorsEnum,
                                required=True)
      flag.add_argument_to_parser(argument_parser)
    """
    def __init__(self, *args, enum_type: type[enum.Enum], **kwargs) -> None:
        ...
    


class MultiValuesFlagDef(FlagDef):
    """Definition for a flag that takes multiple values.

    Sample usage:
      # This defines a flag that can be specified on the command line as:
      #   --colors=red green blue
      flag = MultiValuesFlagDef(name="colors", parse_type=str, required=True)
      flag.add_argument_to_parser(argument_parser)
    """
    def add_argument_to_parser(self, parser: argparse.ArgumentParser) -> None:
        ...
    


@dataclasses.dataclass(frozen=True)
class BooleanFlagDef(FlagDef):
    """Definition for a Boolean flag.

    A boolean flag is always optional with a default value of False. The flag does
    not take any values. Specifying the flag on the commandline will set it to
    True.
    """
    def add_argument_to_parser(self, parser: argparse.ArgumentParser) -> None:
        ...
    


